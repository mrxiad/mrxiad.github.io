<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>配置docker服务器</title>
    <link href="/2023/11/07/docker%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/11/07/docker%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<ul><li>本文介绍如何在ubuntu环境下创建docker容器，并且将此容器设置成一个“服务器”</li><li>然后如何ssh进docker容器(root用户)，并且配置免密登录</li></ul><p><em>步骤如下</em></p><hr><h1 id="1-创建Dockerfile文件"><a href="#1-创建Dockerfile文件" class="headerlink" title="1.创建Dockerfile文件"></a>1.创建Dockerfile文件</h1><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Docker"><span class="hljs-comment"># 使用官方Ubuntu基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:latest<br><br><span class="hljs-comment"># 避免在自动化构建时出现提示</span><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># 安装开发所需的包</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span><br><span class="language-bash">    vim \</span><br><span class="language-bash">    git \</span><br><span class="language-bash">    curl \</span><br><span class="language-bash">    wget \</span><br><span class="language-bash">    build-essential \</span><br><span class="language-bash">    lsb-release \</span><br><span class="language-bash">    sudo \</span><br><span class="language-bash">    man \</span><br><span class="language-bash">    software-properties-common \</span><br><span class="language-bash">    ca-certificates \</span><br><span class="language-bash">    &amp;&amp; apt-get clean \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><br><span class="hljs-comment"># 如果需要其他语言环境或工具，可以在这里继续安装，比如对于Python开发：</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y python3 python3-pip</span><br><br><span class="hljs-comment"># 对于Node.js开发：</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> curl -sL https://deb.nodesource.com/setup_14.x | bash - &amp;&amp; apt-get update &amp;&amp; apt-get install -y nodejs</span><br><br><span class="hljs-comment"># 清理apt缓存以减少镜像大小</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get clean &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><br><span class="hljs-comment"># （可选）设置工作目录，这是容器内的目录，你的项目代码可以放在这里</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /root</span><br><br><span class="hljs-comment"># 设置默认运行的命令，此命令将保持容器运行</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;tail&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;/dev/null&quot;</span>]</span><br></code></pre></td></tr></table></figure><hr><h1 id="2-执行命令创建镜像"><a href="#2-执行命令创建镜像" class="headerlink" title="2.执行命令创建镜像"></a>2.执行命令创建镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t mydocker .<br></code></pre></td></tr></table></figure><p>将<code>mydocker</code>换成你想要的镜像名称</p><hr><h1 id="3-利用镜像创建容器"><a href="#3-利用镜像创建容器" class="headerlink" title="3.利用镜像创建容器"></a>3.利用镜像创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name mydocker-container -p 8080:8080 -p 20000:22 mydocker<br></code></pre></td></tr></table></figure><p>将<code>mydocker-container</code>换成你自己的容器名称，<code>mydocker</code>是镜像名称</p><hr><p>此时容器已经创建成功，可以进入容器查看 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it myapp-container /bin/bash<br></code></pre></td></tr></table></figure><h1 id="4-配置并开启docker容器的ssh服务"><a href="#4-配置并开启docker容器的ssh服务" class="headerlink" title="4.配置并开启docker容器的ssh服务"></a>4.配置并开启docker容器的ssh服务</h1><h2 id="a-确保-SSH-服务已经在容器内安装并正在运行。"><a href="#a-确保-SSH-服务已经在容器内安装并正在运行。" class="headerlink" title="(a)确保 SSH 服务已经在容器内安装并正在运行。"></a>(a)确保 SSH 服务已经在容器内安装并正在运行。</h2><p>可以使用以下命令来安装并启动 SSH 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xddocker apt-get update<br>docker <span class="hljs-built_in">exec</span> -it xddocker apt-get install -y openssh-server<br>docker <span class="hljs-built_in">exec</span> -it xddocker service ssh start<br></code></pre></td></tr></table></figure><p>如果 <code>service ssh start</code> 不工作，您也可以尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xddocker /etc/init.d/ssh start<br></code></pre></td></tr></table></figure><p>或者直接使用 systemctl（如果您的容器支持 systemd）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xddocker systemctl start ssh<br></code></pre></td></tr></table></figure><h2 id="b-设置-root-用户的密码。"><a href="#b-设置-root-用户的密码。" class="headerlink" title="(b)设置 root 用户的密码。"></a>(b)设置 <code>root</code> 用户的密码。</h2><p>你需要使用 <code>passwd</code> 命令来为 <code>root</code> 用户设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xddocker passwd root<br></code></pre></td></tr></table></figure><p>当系统提示时输入并确认密码。</p><h2 id="d-配置-SSH-以允许-root-用户登录。"><a href="#d-配置-SSH-以允许-root-用户登录。" class="headerlink" title="(d)配置 SSH 以允许 root 用户登录。"></a>(d)配置 SSH 以允许 <code>root</code> 用户登录。</h2><p>编辑容器中的 <code>/etc/ssh/sshd_config</code> 文件，将 <code>PermitRootLogin</code> 的值更改为 <code>yes</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xddocker sed -i <span class="hljs-string">&#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><h2 id="e-重新启动-SSH-服务以使更改生效："><a href="#e-重新启动-SSH-服务以使更改生效：" class="headerlink" title="(e)重新启动 SSH 服务以使更改生效："></a>(e)重新启动 SSH 服务以使更改生效：</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> xddocker service ssh restart<br></code></pre></td></tr></table></figure><h2 id="f-使用-SSH-连接到容器："><a href="#f-使用-SSH-连接到容器：" class="headerlink" title="(f)使用 SSH 连接到容器："></a>(f)使用 SSH 连接到容器：</h2><p>现在您应该可以使用 SSH 连接到容器的 <code>root</code> 用户了。使用宿主机的端口 <code>20000</code> 来连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@localhost -p 20000<br></code></pre></td></tr></table></figure><hr><p><strong>到此为止，docker容器的ssh已经完全配置好了</strong></p><hr><h1 id="5-配置免密登录"><a href="#5-配置免密登录" class="headerlink" title="5.配置免密登录"></a>5.配置免密登录</h1><p>以下是在Windows系统使用Git Bash来完成这个过程的详细步骤</p><hr><h2 id="a-生成SSH密钥对"><a href="#a-生成SSH密钥对" class="headerlink" title="(a)生成SSH密钥对"></a>(a)生成SSH密钥对</h2><p>打开<code>git bash</code>,输入命令生成密钥对，一路回车，密钥对在 <code>/c/Users/&lt;你的用户名&gt;/.ssh/id_rsa</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096<br></code></pre></td></tr></table></figure><h2 id="b-复制SSH公钥到远程服务器"><a href="#b-复制SSH公钥到远程服务器" class="headerlink" title="(b)复制SSH公钥到远程服务器"></a>(b)复制SSH公钥到远程服务器</h2><p>本地git bash中查看公钥内容,复制下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>然后登录远程主机   (端口号20000，这是映射的端口)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@远程主机ip -p 20000<br></code></pre></td></tr></table></figure><p>登录到远程服务器后，执行以下命令来编辑（或创建）<code>authorized_keys</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.ssh<br><span class="hljs-built_in">chmod</span> 700 ~/.ssh<br><span class="hljs-built_in">touch</span> ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys<br>vim ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>将复制的公钥粘贴进文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basj">按i键进入编辑模式<br>按住Shift+Insert进行粘贴<br>按Esc退出面积模式<br>输入&quot;:wq&quot;保存退出<br></code></pre></td></tr></table></figure><h2 id="c-退出后，即可进行免密登录"><a href="#c-退出后，即可进行免密登录" class="headerlink" title="(c)退出后，即可进行免密登录"></a>(c)退出后，即可进行免密登录</h2>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>悬线法dp(玉蟾宫+ICPC银川K)</title>
    <link href="/2023/11/07/%E6%82%AC%E7%BA%BF%E6%B3%95dp%EF%BC%881%EF%BC%89/"/>
    <url>/2023/11/07/%E6%82%AC%E7%BA%BF%E6%B3%95dp%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="玉蟾宫"><a href="#玉蟾宫" class="headerlink" title="玉蟾宫"></a>玉蟾宫</h1><p><a href="https://www.luogu.com.cn/problem/P4147">洛谷P4147玉蟾宫</a></p><p>给一个矩阵，一些点有障碍物，求最大子矩阵</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p><code>悬线法dp</code>，第一次听说。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>（1）结论：答案一定是一个矩形（废话。。。）<br>（2）最大矩形一定是：由其中<code>某个点</code>，<code>先</code>向上扩展到最大，<code>然后</code>再分别向左、向右走到最远。<br>（3）由于（2）的结论对所有点这样操作，一定可以找到最大矩形<br>  (4)  注意<code>先初始化h，L，R</code>，然后在<code>h=1的时候预处理L,R</code>，然后<code>再更新h，同时更新L，R</code>，并且统计答案   </p><h2 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> a[N][N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N][N];<span class="hljs-comment">//每个点往上延申的最大长度</span><br><span class="hljs-type">int</span> L[N][N];<span class="hljs-comment">//在h保证的情况下，每个点往左走最远到哪</span><br><span class="hljs-type">int</span> R[N][N];<span class="hljs-comment">//在h保证的情况下，每个点往右走最远到哪</span><br><br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>cin&gt;&gt;a[i][j];<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;F&#x27;</span>)h[i][j]=<span class="hljs-number">1</span>;<span class="hljs-comment">//自己</span><br>L[i][j]=R[i][j]=j;<span class="hljs-comment">//自己 </span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//在h=1的情况下处理L和R </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-comment">//处理L </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;F&#x27;</span>&amp;&amp;a[i][j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)&#123;<br>L[i][j]=L[i][j<span class="hljs-number">-1</span>];<br>&#125; <br>&#125; <br><span class="hljs-comment">//处理R </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;F&#x27;</span>&amp;&amp;a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)&#123;<br>R[i][j]=R[i][j+<span class="hljs-number">1</span>];<br>&#125; <br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;F&#x27;</span>&amp;&amp;a[i<span class="hljs-number">-1</span>][j]==<span class="hljs-string">&#x27;F&#x27;</span>)&#123;<br>h[i][j]=h[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;<span class="hljs-comment">//h数组扩展 </span><br><br><span class="hljs-comment">//L、R向内收缩 </span><br>L[i][j]=<span class="hljs-built_in">max</span>(L[i][j],L[i<span class="hljs-number">-1</span>][j]);<br>R[i][j]=<span class="hljs-built_in">min</span>(R[i][j],R[i<span class="hljs-number">-1</span>][j]); <br>&#125;<br><br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;F&#x27;</span>)&#123;<br>ans=<span class="hljs-built_in">max</span>(ans,h[i][j]*(R[i][j]-L[i][j]+<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br>&#125; <br>cout&lt;&lt;ans*<span class="hljs-number">3</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h1 id="ICPC银川"><a href="#ICPC银川" class="headerlink" title="ICPC银川"></a>ICPC银川</h1><p>[2019ICPC银川K题](<a href="https://codeforces.com/gym/104021/problem/K">Problem - K - Codeforces</a>)</p><p>给定一个矩阵A和一个矩阵B，求最大子矩阵，满足最大子矩阵同时是A的最大子矩阵和B的最大子矩阵</p><h2 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h2><p>悬线法dp，注意转移条件，以及<code>边界问题</code>！！！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> b[N][N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N][N];<span class="hljs-comment">//每个点往上延申的最大长度</span><br><span class="hljs-type">int</span> L[N][N];<span class="hljs-comment">//在h保证的情况下，每个点往左走最远到哪</span><br><span class="hljs-type">int</span> R[N][N];<span class="hljs-comment">//在h保证的情况下，每个点往右走最远到哪</span><br>pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;pos[N*N];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>), cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++) &#123;<br>cin&gt;&gt;a[i][j];<br>h[i][j]=<span class="hljs-number">1</span>;<br>L[i][j]=R[i][j]=j;<span class="hljs-comment">//自己</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++) &#123;<br>cin&gt;&gt;b[i][j];<br>pos[b[i][j]]= &#123;i,j&#125;;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//在h=1的情况下处理L和R</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-comment">//处理L</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>; j&lt;=m; j++) &#123;<br><span class="hljs-type">int</span> x=a[i][j];<span class="hljs-comment">//a中当前数字</span><br><span class="hljs-type">int</span> y=a[i][j<span class="hljs-number">-1</span>];<span class="hljs-comment">//a中当前数字的左边那个数字</span><br><br><br><span class="hljs-comment">//当前数字在b数组中的位置</span><br><span class="hljs-type">int</span> bx=pos[x].first;<br><span class="hljs-type">int</span> by=pos[x].second;<br><br><span class="hljs-comment">//如果可以向左边扩展</span><br><span class="hljs-keyword">if</span>(b[bx][by<span class="hljs-number">-1</span>]==y) &#123;<br>L[i][j]=L[i][j<span class="hljs-number">-1</span>];<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//处理R</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">1</span>; j--) &#123;<br><span class="hljs-type">int</span> x=a[i][j];<span class="hljs-comment">//a中当前数字</span><br><span class="hljs-type">int</span> y=a[i][j+<span class="hljs-number">1</span>];<span class="hljs-comment">//a中当前数字的右边那个数字</span><br><br><br><span class="hljs-comment">//当前数字在b数组中的位置</span><br><span class="hljs-type">int</span> bx=pos[x].first;<br><span class="hljs-type">int</span> by=pos[x].second;<br><br><span class="hljs-comment">//如果可以向右边扩展</span><br><span class="hljs-keyword">if</span>(b[bx][by+<span class="hljs-number">1</span>]==y) &#123;<br>R[i][j]=R[i][j+<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//更新h,L,R ，统计答案</span><br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++) &#123;<br><span class="hljs-type">int</span> x=a[i][j];<span class="hljs-comment">//a中当前数字</span><br><span class="hljs-type">int</span> y=a[i<span class="hljs-number">-1</span>][j];<span class="hljs-comment">//a中当前数字的上边那个数字</span><br><br><br><span class="hljs-comment">//当前数字在b数组中的位置</span><br><span class="hljs-type">int</span> bx=pos[a[i][j]].first;<br><span class="hljs-type">int</span> by=pos[a[i][j]].second;<br><br><span class="hljs-comment">//如果可以向上边扩展</span><br><span class="hljs-keyword">if</span>(y&amp;&amp;b[bx<span class="hljs-number">-1</span>][by]==y) &#123;<br>h[i][j]=h[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;<br>L[i][j]=<span class="hljs-built_in">max</span>(L[i][j],L[i<span class="hljs-number">-1</span>][j]);<br>R[i][j]=<span class="hljs-built_in">min</span>(R[i][j],R[i<span class="hljs-number">-1</span>][j]);<br>&#125;<br>ans=<span class="hljs-built_in">max</span>(ans,h[i][j]*(R[i][j]-L[i][j]+<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
